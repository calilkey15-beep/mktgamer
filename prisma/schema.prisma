// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPlan {
  FREE
  PRO
  PREMIUM
}

enum LoanStatus {
  ACTIVE
  PAID
  OVERDUE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  plan      UserPlan @default(FREE)
  planExpiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clients   Client[]
  loans     Loan[]
  payments  Payment[]
  contracts Contract[]

  @@map("users")
}

model Client {
  id        String   @id @default(cuid())
  userId    String
  name      String
  cpf       String?
  phone     String
  whatsapp  String?
  address   String
  photos    String[] // Array of photo URLs
  documents String[] // Array of document URLs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  loans Loan[]

  @@map("clients")
}

model Loan {
  id           String     @id @default(cuid())
  clientId     String
  userId       String
  amount       Float
  interestRate Float
  totalAmount  Float
  dueDate      DateTime
  status       LoanStatus @default(ACTIVE)
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments  Payment[]
  contracts Contract[]

  @@map("loans")
}

model Payment {
  id        String        @id @default(cuid())
  userId    String
  loanId    String?
  amount    Float
  status    PaymentStatus @default(PENDING)
  type      String        @default("subscription") // subscription, loan_payment
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  loan Loan? @relation(fields: [loanId], references: [id], onDelete: SetNull)

  @@map("payments")
}

model Contract {
  id        String   @id @default(cuid())
  loanId    String
  userId    String
  fileName  String
  fileUrl   String
  signed    Boolean  @default(false)
  signedAt  DateTime?
  createdAt DateTime @default(now())

  // Relations
  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contracts")
}